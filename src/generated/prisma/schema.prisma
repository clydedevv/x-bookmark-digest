// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  twitterId     String?    @unique
  accounts      Account[]
  sessions      Session[]
  bookmarks     Bookmark[]
  digests       Digest[]
  tags          Tag[]
  recipes       Recipe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookmark {
  id             String        @id @default(cuid())
  tweetId        String        @unique
  content        String
  authorName     String
  authorUsername String
  authorImage    String?
  url            String
  articleContent String?
  createdAt      DateTime      @default(now())
  importedAt     DateTime      @default(now())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags           BookmarkTag[]
  digestItems    DigestItem[]
}

model Tag {
  id        String        @id @default(cuid())
  name      String
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks BookmarkTag[]

  @@unique([name, userId])
}

model BookmarkTag {
  id         String   @id @default(cuid())
  bookmarkId String
  tagId      String
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([bookmarkId, tagId])
}

model Digest {
  id          String       @id @default(cuid())
  name        String
  description String?
  schedule    String? // cron expression
  lastSent    DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       DigestItem[]
}

model DigestItem {
  id         String   @id @default(cuid())
  digestId   String
  bookmarkId String
  digest     Digest   @relation(fields: [digestId], references: [id], onDelete: Cascade)
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)

  @@unique([digestId, bookmarkId])
}

model Recipe {
  id          String   @id @default(cuid())
  name        String
  description String?
  filters     Json // Store filter configuration as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
